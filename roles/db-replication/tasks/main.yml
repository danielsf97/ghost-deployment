---

- set_fact:
    other_node_ext_ip: '{{ groups.database[1] }}'
  when: inventory_hostname == groups.database[0]

- set_fact:
    other_node_int_ip: '{{ hostvars[other_node_ext_ip].ansible_all_ipv4_addresses[0] }}'
  when: inventory_hostname == groups.database[0]

- set_fact:
    other_node_ext_ip: '{{ groups.database[0] }}'
  when: inventory_hostname == groups.database[1]

- set_fact:
    other_node_int_ip: '{{ hostvars[other_node_ext_ip].ansible_all_ipv4_addresses[0] }}'
  when: inventory_hostname == groups.database[1]

- name: Ensure replication user exists on master.
  mysql_user:
    name: replication
    host: '{{ other_node_int_ip }}'
    password: password
    priv: '*.*:REPLICATION SLAVE,REPLICATION CLIENT'
    login_user: root
    login_password: "{{ root_passwd }}"
    state: present

- name: Check master replication status.
  mysql_replication: 
    mode: getmaster
    login_user: root
    login_password: "{{ root_passwd }}"
  delegate_to: '{{ other_node_ext_ip }}'
  register: master

- name: Start replication.
  mysql_replication: 
    mode: stopslave
    login_user: root
    login_password: "{{ root_passwd }}"

- name: Configure replication on the slave.
  mysql_replication:
    mode: changemaster
    master_host: '{{ other_node_int_ip }}'
    master_user: replication
    master_password: password
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
    login_user: root
    login_password: "{{ root_passwd }}"

- name: Start replication.
  mysql_replication: 
    mode: startslave
    login_user: root
    login_password: "{{ root_passwd }}"

